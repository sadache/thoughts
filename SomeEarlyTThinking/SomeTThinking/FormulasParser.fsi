// Signature file for parser generated by fsyacc
module FormulasParser
open Exp
type token = 
  | EOF
  | IF
  | THEN
  | ELSE
  | LPAREN
  | RPAREN
  | EQUALS
  | LESS_OR_EQUALS
  | GREATER_OR_EQUALS
  | GREATER_THAN
  | LESS_THAN
  | PLUS
  | MINUS
  | ASTER
  | SLASH
  | CHILDREN
  | YEAR
  | MONTH
  | REF of (System.String)
  | BOOL of (System.Boolean)
  | FLOAT of (System.Double)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EQUALS
    | TOKEN_LESS_OR_EQUALS
    | TOKEN_GREATER_OR_EQUALS
    | TOKEN_GREATER_THAN
    | TOKEN_LESS_THAN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_ASTER
    | TOKEN_SLASH
    | TOKEN_CHILDREN
    | TOKEN_YEAR
    | TOKEN_MONTH
    | TOKEN_REF
    | TOKEN_BOOL
    | TOKEN_FLOAT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Expr
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( Exp ) 
